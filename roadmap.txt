Familiarize <b>(Choose at least 2)</b>
	Write a comparison between the library version and the old graphical version
	Generate a list of questions / comments / improvments for the new library
	Research and write a specification for hooking into the library / how the library must be able to be accessed
CMDLine-Runner
	Description: a script / application for running the library from the command line.  simple and basic
	Purpose: used by the students and / or Mr. J to quickly run / test their programs without needing the display of the GUI
Inception
	Translate old armsim project into 4 phases behind the new interface architecture
	Weed out components of the old phases that are no longer needed
POC
	Implement dummy simulator that sits behind the library interface and does something
Investigate <b>(Choose at least 1)</b>
	Gather input on the state of the old version as well as the new version - specifically what was unnecessarily troublesome and any reservations about the new interface
	Research cross-language libraries - e.g., library written in java, how do i hook into it with python? etc.  Review library interface before real implementation / complex programs begin
Pre-Alpha
	Design and implement core classes of the simulator inside the dummy
Alpha
	Extend the functionality to include some basic commands
GUI
	Description: A graphical interface for the memory / etc of the simulator - very reminiscent of the old simulator project.
	Purpose: Used by the students to easily see what their simulator is doing in its guts, without necessariliy having to step through in an IDE debugger.
Beta
	Flesh out the functionality for a nigh-complete simulator
Educate <b>(Choose at least 1)</b>
	Write a paper summarizing how the new interface works - a guide for a student taking the course.
	Take the library and translate it into some other language / figure out a method for any application to hook into it - make a guide for making it cross-platform accessible.
Auto-Grader
	Purpose: used by Mr. Jueckstock to quickly grade the simulators
	Description: could simply be a series of scripts in python or bash or something that shunt simulator input and output around and perform diffs
Release
	Fully functional simulator that meets the interoperable requirements.  Well documented along with a manual
Terminal Emulator <b>(Optional)</b>
	Description: Allows manual input from / to a command-prompt-esque terminal
	Purpose: Give students another basic form of io with the emulator
Display Emulator <b>(Optional)</b>
	Description: An emulator for a vga display with keyboard input or something
	Purpose: Fun toy for eager students
Expansion <b>(Optional)</b>
	Implement something cool to extend your Simulator, like an ancillary app / interworking with another preexisting ancillary app.